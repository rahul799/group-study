{"version":3,"sources":["components/login.component.js","components/signup.component.js","App.js","serviceWorker.js","index.js"],"names":["Login","className","type","placeholder","id","htmlFor","href","Component","SignUp","App","to","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4SAEqBA,E,uKAEjB,OACE,8BACE,uCAEA,yBAAKC,UAAU,cACb,gDACA,2BACEC,KAAK,QACLD,UAAU,eACVE,YAAY,iBAIhB,yBAAKF,UAAU,cACb,2CACA,2BACEC,KAAK,WACLD,UAAU,eACVE,YAAY,oBAIhB,yBAAKF,UAAU,cACb,yBAAKA,UAAU,kCACb,2BACEC,KAAK,WACLD,UAAU,uBACVG,GAAG,iBAEL,2BAAOH,UAAU,uBAAuBI,QAAQ,gBAAhD,iBAMJ,4BAAQH,KAAK,SAASD,UAAU,6BAAhC,UAGA,uBAAGA,UAAU,8BAAb,UACS,uBAAGK,KAAK,KAAR,mB,GAzCkBC,aCAdC,E,uKAEjB,OACE,8BACE,uCAEA,yBAAKP,UAAU,cACb,6CACA,2BACEC,KAAK,OACLD,UAAU,eACVE,YAAY,gBAIhB,yBAAKF,UAAU,cACb,4CACA,2BAAOC,KAAK,OAAOD,UAAU,eAAeE,YAAY,eAG1D,yBAAKF,UAAU,cACb,gDACA,2BACEC,KAAK,QACLD,UAAU,eACVE,YAAY,iBAIhB,yBAAKF,UAAU,cACb,2CACA,2BACEC,KAAK,WACLD,UAAU,eACVE,YAAY,oBAIhB,4BAAQD,KAAK,SAASD,UAAU,6BAAhC,WAGA,uBAAGA,UAAU,8BAAb,sBACqB,uBAAGK,KAAK,KAAR,kB,GA1COC,aC8CrBE,MAxCf,WACE,OACE,kBAAC,IAAD,KACE,yBAAKR,UAAU,OACb,yBAAKA,UAAU,kDACb,yBAAKA,UAAU,aACb,kBAAC,IAAD,CAAMA,UAAU,eAAeS,GAAI,YAAnC,eAGA,yBAAKT,UAAU,2BAA2BG,GAAG,uBAC3C,wBAAIH,UAAU,sBACZ,wBAAIA,UAAU,YACZ,kBAAC,IAAD,CAAMA,UAAU,WAAWS,GAAI,YAA/B,UAIF,wBAAIT,UAAU,YACZ,kBAAC,IAAD,CAAMA,UAAU,WAAWS,GAAI,YAA/B,gBASV,yBAAKT,UAAU,gBACb,yBAAKA,UAAU,cACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOU,OAAK,EAACC,KAAK,IAAIC,UAAWb,IACjC,kBAAC,IAAD,CAAOY,KAAK,WAAWC,UAAWb,IAClC,kBAAC,IAAD,CAAOY,KAAK,WAAWC,UAAWL,UC3B5BM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.77cd7680.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nexport default class Login extends Component {\n  render() {\n    return (\n      <form>\n        <h3>Sign In</h3>\n\n        <div className=\"form-group\">\n          <label>Email address</label>\n          <input\n            type=\"email\"\n            className=\"form-control\"\n            placeholder=\"Enter email\"\n          />\n        </div>\n\n        <div className=\"form-group\">\n          <label>Password</label>\n          <input\n            type=\"password\"\n            className=\"form-control\"\n            placeholder=\"Enter password\"\n          />\n        </div>\n\n        <div className=\"form-group\">\n          <div className=\"custom-control custom-checkbox\">\n            <input\n              type=\"checkbox\"\n              className=\"custom-control-input\"\n              id=\"customCheck1\"\n            />\n            <label className=\"custom-control-label\" htmlFor=\"customCheck1\">\n              Remember me\n            </label>\n          </div>\n        </div>\n\n        <button type=\"submit\" className=\"btn btn-primary btn-block\">\n          Submit\n        </button>\n        <p className=\"forgot-password text-right\">\n          Forgot <a href=\"#\">password?</a>\n        </p>\n      </form>\n    );\n  }\n}\n","import React, { Component } from \"react\";\n\nexport default class SignUp extends Component {\n  render() {\n    return (\n      <form>\n        <h3>Sign Up</h3>\n\n        <div className=\"form-group\">\n          <label>First name</label>\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            placeholder=\"First name\"\n          />\n        </div>\n\n        <div className=\"form-group\">\n          <label>Last name</label>\n          <input type=\"text\" className=\"form-control\" placeholder=\"Last name\" />\n        </div>\n\n        <div className=\"form-group\">\n          <label>Email address</label>\n          <input\n            type=\"email\"\n            className=\"form-control\"\n            placeholder=\"Enter email\"\n          />\n        </div>\n\n        <div className=\"form-group\">\n          <label>Password</label>\n          <input\n            type=\"password\"\n            className=\"form-control\"\n            placeholder=\"Enter password\"\n          />\n        </div>\n\n        <button type=\"submit\" className=\"btn btn-primary btn-block\">\n          Sign Up\n        </button>\n        <p className=\"forgot-password text-right\">\n          Already registered <a href=\"#\">sign in?</a>\n        </p>\n      </form>\n    );\n  }\n}\n","import React from \"react\";\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\nimport Login from \"./components/login.component\";\nimport SignUp from \"./components/signup.component\";\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <nav className=\"navbar navbar-expand-lg navbar-light fixed-top\">\n          <div className=\"container\">\n            <Link className=\"navbar-brand\" to={\"/sign-in\"}>\n              Group-Study\n            </Link>\n            <div className=\"collapse navbar-collapse\" id=\"navbarTogglerDemo02\">\n              <ul className=\"navbar-nav ml-auto\">\n                <li className=\"nav-item\">\n                  <Link className=\"nav-link\" to={\"/sign-in\"}>\n                    Login\n                  </Link>\n                </li>\n                <li className=\"nav-item\">\n                  <Link className=\"nav-link\" to={\"/sign-up\"}>\n                    Sign up\n                  </Link>\n                </li>\n              </ul>\n            </div>\n          </div>\n        </nav>\n\n        <div className=\"auth-wrapper\">\n          <div className=\"auth-inner\">\n            <Switch>\n              <Route exact path=\"/\" component={Login} />\n              <Route path=\"/sign-in\" component={Login} />\n              <Route path=\"/sign-up\" component={SignUp} />\n            </Switch>\n          </div>\n        </div>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}